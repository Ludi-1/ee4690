import cocotb
from cocotb.clock import Clock
from cocotb.triggers import RisingEdge, FallingEdge, Timer
from cocotb.binary import BinaryValue
import random

SAMPLE = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011100000000000000000000000011111111111111100000000000000000111111111111000000000000000000000000011000000000000000000000000001100000000000000000000000001100000000000000000000000001110000000000000000000000000110000000000000000000000000111000000000000000000000000011000000000000000000000000001100000000000000000000000001100000000000000000000000001110000000000000000000000001110000000000000000000000000110000000000000000000000000110000000000000000000000000111000000000000000000000000011100000000000000000000000001110000000000000000000000000110000000000000000000000000000000000000000000"
GOLDEN = [26, -42, -4, 52, -8, 10, -46, 82, -18, 34]

@cocotb.test()
async def classifier_test(dut):
    sample_bin = BinaryValue(SAMPLE[::-1], n_bits=784) # use reverse, we want 783:0
    clock = Clock(dut.clk, 10, units="ns")  # Create a 10ns clock period
    cocotb.start_soon(clock.start())  # Start the clock
    dut.reset.value = 1
    await RisingEdge(dut.clk)
    dut.reset.value = 0
    dut.inbuffer_data = sample_bin
    for i in range(10):
        await RisingEdge(dut.clk)
        output = dut.outbuffer_data.value.signed_integer
        assert(output == GOLDEN[i])
    await RisingEdge(dut.clk)